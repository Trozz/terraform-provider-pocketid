name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GO_VERSION: "1.24"
  GOLANGCI_LINT_VERSION: "v2.2.1"

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run go mod tidy
        run: go mod tidy

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Check code formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files need formatting:"
            gofmt -l .
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.24"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run tests
        run: |
          gotestsum --junitfile junit.xml --format testname -- -v -cover -coverprofile=coverage.out ./internal/...

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: junit.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: matrix.go-version == env.GO_VERSION
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Trozz/terraform-provider-pocketid
          files: ./coverage.out,./junit.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  acceptance-test:
    name: Acceptance Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Start Pocket-ID test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          # Wait for container to be healthy
          for i in {1..30}; do
            if docker-compose -f docker-compose.test.yml ps | grep -q "healthy"; then
              echo "Pocket-ID is healthy!"
              break
            fi
            echo "Waiting for Pocket-ID to be healthy..."
            sleep 2
          done
          sleep 5

      - name: Initialize test database
        run: |
          chmod +x ./scripts/prepare-test-db.sh
          ./scripts/prepare-test-db.sh

      - name: Run acceptance tests
        env:
          POCKETID_BASE_URL: http://localhost:1411
          POCKETID_API_TOKEN: test-terraform-provider-token-123456789
          TF_ACC: 1
        run: |
          go test -v -timeout 30m ./internal/... -tags=acc

      - name: Test provider binary with Terraform
        env:
          POCKETID_BASE_URL: http://localhost:1411
          POCKETID_API_TOKEN: test-terraform-provider-token-123456789
        run: |
          # Build and install provider
          make install

          # Test with example configurations
          cd examples/complete
          terraform init
          terraform plan
          terraform apply -auto-approve
          terraform destroy -auto-approve

      - name: Stop test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down
          rm -rf test-data

  pre-release:
    name: Pre-release
    runs-on: ubuntu-latest
    needs: [lint, test, acceptance-test]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.actor != 'dependabot[bot]'
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Go file changes
        id: go_changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, assuming Go files changed"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            # Check if any Go files changed since the last tag
            GO_CHANGES=$(git diff --name-only ${LATEST_TAG}..HEAD -- '*.go' 'go.mod' 'go.sum' | wc -l)

            if [ "$GO_CHANGES" -gt 0 ]; then
              echo "Go files changed since ${LATEST_TAG}"
              echo "changed=true" >> $GITHUB_OUTPUT
              git diff --name-only ${LATEST_TAG}..HEAD -- '*.go' 'go.mod' 'go.sum'
            else
              echo "No Go files changed since ${LATEST_TAG}"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set up Go
        if: steps.go_changes.outputs.changed == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Import GPG key
        if: steps.go_changes.outputs.changed == 'true'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate snapshot version
        if: steps.go_changes.outputs.changed == 'true'
        id: version
        run: |
          # Get the latest release tag (exclude pre-release tags)
          LATEST_TAG=$(git tag -l 'v*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || echo "v0.0.0")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest release tag: ${LATEST_TAG}"

          # Remove 'v' prefix
          VERSION=${LATEST_TAG#v}
          echo "Version without prefix: ${VERSION}"

          # Parse version components
          IFS='.' read -r major minor patch <<< "$VERSION"
          echo "Version components: major=${major}, minor=${minor}, patch=${patch}"

          # Generate new version
          NEW_VERSION="${major}.${minor}.$((patch + 1))-dev.$(date +%Y%m%d%H%M%S)+$(git rev-parse --short HEAD)"
          echo "Pre-release version: ${NEW_VERSION}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Run GoReleaser (snapshot)
        if: steps.go_changes.outputs.changed == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --skip=sign --clean --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate pre-release attestations
        if: steps.go_changes.outputs.changed == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/*.zip
            dist/*_checksums.txt

      - name: Upload artifacts
        if: steps.go_changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pre-release-artifacts
          path: dist/*

      - name: Create GitHub pre-release
        if: steps.go_changes.outputs.changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: "Development Build v${{ steps.version.outputs.version }}"
          tag_name: "v${{ steps.version.outputs.version }}"
          prerelease: true
          draft: false
          files: |
            dist/*.zip
            dist/*_checksums.txt
          body: |
            ## Development Build

            This is an automated development build from commit ${{ github.sha }}.

            **⚠️ This is a pre-release version and should not be used in production.**

            ### Commit Information
            - SHA: ${{ github.sha }}
            - Author: ${{ github.actor }}
            - Message: ${{ github.event.head_commit.message }}

            ### Installation

            Download the appropriate archive for your platform and extract the provider binary.


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test, acceptance-test]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: "-fmt sarif -out gosec-results.sarif ./..."

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "gosec-results.sarif"

  # Job to consolidate status for PR checks
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, acceptance-test, security-scan]
    if: always()
    steps:
      - name: Check CI Status
        id: check_status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.acceptance-test.result }}" != "success" ]; then
            echo "::error::One or more CI jobs failed"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Acceptance Test: ${{ needs.acceptance-test.result }}"
            echo "Security Scan: ${{ needs.security-scan.result }}"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "All CI jobs passed successfully!"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Acceptance Test: ${{ needs.acceptance-test.result }}"
            echo "Security Scan: ${{ needs.security-scan.result }}"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi

      - name: Create PR Comment
        if: github.event_name == 'pull_request' && failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ❌ CI Pipeline Failed

            The CI pipeline has encountered failures. Please review the results below:

            | Job | Status |
            |-----|--------|
            | 🔍 **Lint** | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🧪 **Test** | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🔬 **Acceptance Test** | ${{ needs.acceptance-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🛡️ **Security Scan** | ${{ needs.security-scan.result == 'success' && '✅ Passed' || needs.security-scan.result == 'skipped' && '⏭️ Skipped' || '⚠️ Failed (non-blocking)' }} |

            Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed logs.

            <details>
            <summary>💡 Troubleshooting Tips</summary>

            - **Lint failures**: Run `make lint` locally to see formatting issues
            - **Test failures**: Run `make test` to reproduce test failures
            - **Acceptance test failures**: Check if Pocket-ID service is properly configured
            </details>

      - name: Create Success PR Comment
        if: github.event_name == 'pull_request' && success() && needs.security-scan.result != 'success'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ✅ CI Pipeline Passed (with warnings)

            All required checks have passed, but there are security warnings to review:

            | Job | Status |
            |-----|--------|
            | 🔍 **Lint** | ✅ Passed |
            | 🧪 **Test** | ✅ Passed |
            | 🔬 **Acceptance Test** | ✅ Passed |
            | 🛡️ **Security Scan** | ⚠️ Failed (non-blocking) |

            Please review the [security scan results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for potential vulnerabilities.
