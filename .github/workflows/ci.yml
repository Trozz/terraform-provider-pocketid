name: CI

on:
  pull_request:
    branches:
      - main
      - develop

env:
  GO_VERSION: "1.24"
  GOLANGCI_LINT_VERSION: "v2.2.1"

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.filter.outputs.go }}
      scripts: ${{ steps.filter.outputs.scripts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - '.golangci.yml'
            scripts:
              - 'scripts/**'
              - '.github/workflows/ci.yml'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run go mod tidy
        run: go mod tidy

      - name: Check for Go file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - '.golangci.yml'

      - name: Run golangci-lint
        if: steps.filter.outputs.go == 'true'
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Check code formatting
        if: steps.filter.outputs.go == 'true'
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files need formatting:"
            gofmt -l .
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run tests
        run: |
          gotestsum --junitfile junit.xml --format testname -- -v -cover -coverprofile=coverage.out ./internal/...

      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: always()
        with:
          name: test-results
          path: junit.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        if: matrix.go-version == env.GO_VERSION
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Trozz/terraform-provider-pocketid
          files: ./coverage.out,./junit.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  acceptance-test:
    name: Acceptance Test
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.go == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup and start Pocket-ID test environment
        run: |
          # Install SQLite (needed for database operations)
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y sqlite3
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install sqlite3 || true
          fi

          # Make script executable and run it
          chmod +x ./scripts/prepare-test-db.sh
          ./scripts/prepare-test-db.sh

      - name: Run acceptance tests with coverage
        env:
          POCKETID_BASE_URL: http://localhost:1411
          POCKETID_API_TOKEN: test-terraform-provider-token-123456789
          TF_ACC: 1
        run: |
          go test -v -timeout 30m -cover -coverprofile=acceptance-coverage.out ./internal/... -tags=acc

      - name: Upload acceptance test coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Trozz/terraform-provider-pocketid
          files: ./acceptance-coverage.out
          flags: acceptancetests
          name: codecov-acceptance
          fail_ci_if_error: true
          verbose: true

      - name: Stop test environment
        if: always()
        run: |
          # Kill pocket-id process
          pkill -f pocket-id || true
          # Clean up test data
          rm -rf test-data

  build-provider:
    name: Build Provider
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.go == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build provider binary
        run: |
          # Build the provider
          go build -o terraform-provider-pocketid .

          # Create directory structure for artifact
          mkdir -p artifact
          cp terraform-provider-pocketid artifact/

          # Also create a proper plugin directory structure
          PROVIDER_DIR="artifact/terraform.d/plugins/registry.terraform.io/trozz/pocketid/0.1.0/linux_amd64"
          mkdir -p "$PROVIDER_DIR"
          cp terraform-provider-pocketid "$PROVIDER_DIR/"

      - name: Upload provider artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: provider-binary
          path: artifact/
          retention-days: 1

  terraform-compatibility:
    name: Terraform Compatibility Test
    runs-on: ubuntu-latest
    needs: [changes, build-provider]
    if: needs.changes.outputs.go == 'true'
    strategy:
      fail-fast: false
      matrix:
        terraform-version: ["1.5.7", "1.6.6", "1.7.5", "1.8.5", "1.9.8"]
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Terraform ${{ matrix.terraform-version }}
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: ${{ matrix.terraform-version }}

      - name: Download provider artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4
        with:
          name: provider-binary
          path: artifact/

      - name: Install provider locally
        run: |
          # Copy the plugin directory to the Terraform plugin cache
          mkdir -p ~/.terraform.d/plugins
          cp -r artifact/terraform.d/plugins/* ~/.terraform.d/plugins/

          # Make the provider executable
          chmod +x ~/.terraform.d/plugins/registry.terraform.io/trozz/pocketid/0.1.0/linux_amd64/terraform-provider-pocketid

          # Verify installation
          ls -la ~/.terraform.d/plugins/registry.terraform.io/trozz/pocketid/0.1.0/linux_amd64/

      - name: Setup and start Pocket-ID test environment
        run: |
          # Install SQLite (needed for database operations)
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y sqlite3
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install sqlite3 || true
          fi

          # Make script executable and run it
          chmod +x ./scripts/prepare-test-db.sh
          ./scripts/prepare-test-db.sh

      - name: Test provider with Terraform ${{ matrix.terraform-version }}
        env:
          POCKETID_BASE_URL: http://localhost:1411
          POCKETID_API_TOKEN: test-terraform-provider-token-123456789
        run: |
          # Test with example configurations
          cd examples/complete
          terraform version
          terraform init

          # Pass environment variables as Terraform variables
          terraform plan \
            -var="pocketid_base_url=$POCKETID_BASE_URL" \
            -var="pocketid_api_token=$POCKETID_API_TOKEN"

          terraform apply -auto-approve \
            -var="pocketid_base_url=$POCKETID_BASE_URL" \
            -var="pocketid_api_token=$POCKETID_API_TOKEN"

          terraform destroy -auto-approve \
            -var="pocketid_base_url=$POCKETID_BASE_URL" \
            -var="pocketid_api_token=$POCKETID_API_TOKEN"

      - name: Stop test environment
        if: always()
        run: |
          # Kill pocket-id process
          pkill -f pocket-id || true
          # Clean up test data
          rm -rf test-data



  # Job to consolidate status for PR checks
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [changes, lint, test, acceptance-test, build-provider, terraform-compatibility]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Check CI Status
        id: check_status
        env:
          LINT_RESULT: ${{ needs.lint.result }}
          TEST_RESULT: ${{ needs.test.result }}
          ACCEPTANCE_RESULT: ${{ needs.acceptance-test.result }}
          BUILD_RESULT: ${{ needs.build-provider.result }}
          TERRAFORM_RESULT: ${{ needs.terraform-compatibility.result }}
        run: ./scripts/ci-status-check.sh

      - name: Find Comment
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/find-comment@b30e6a3c0ed37e7c023ccd3f1db5c6c0b0c23aad # v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: <!-- CI-STATUS -->

      - name: Generate PR Comment
        if: always() && github.event_name == 'pull_request'
        id: generate_comment
        env:
          STATUS: ${{ steps.check_status.outputs.status }}
          LINT_RESULT: ${{ needs.lint.result }}
          TEST_RESULT: ${{ needs.test.result }}
          ACCEPTANCE_RESULT: ${{ needs.acceptance-test.result }}
          TERRAFORM_RESULT: ${{ needs.terraform-compatibility.result }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          comment=$(./scripts/generate-ci-comment.sh)
          if [ "$comment" != "NO_COMMENT" ]; then
            echo "comment<<EOF" >> $GITHUB_OUTPUT
            echo "$comment" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "should_comment=true" >> $GITHUB_OUTPUT
          else
            echo "should_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update PR Comment
        if: always() && steps.generate_comment.outputs.should_comment == 'true'
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9 # v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: ${{ steps.generate_comment.outputs.comment }}

      - name: Fail if CI Failed
        if: always() && steps.check_status.outputs.status == 'failed'
        run: |
          echo "::error::CI checks failed. See PR comment for details."
          exit 1
