name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest release tag (exclude pre-release tags)
          LATEST_TAG=$(git tag -l 'v*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || echo "v0.0.0")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag: ${LATEST_TAG}"
          
          # Remove 'v' prefix
          VERSION=${LATEST_TAG#v}
          echo "current_version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: ${VERSION}"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          # Parse version components
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # Bump version based on type
          case "$VERSION_TYPE" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="${major}.${minor}.${patch}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"

      - name: Create and push tag
        run: |
          NEW_TAG="v${{ steps.new_version.outputs.new_version }}"
          
          # Create annotated tag with optional release notes
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}" -m "${{ github.event.inputs.release_notes }}"
          else
            git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}"
          fi
          
          # Push the tag
          git push origin "${NEW_TAG}"
          
          echo "Successfully created and pushed tag: ${NEW_TAG}"

      - name: Summary
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous version:** v${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New version:** v${{ steps.new_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump type:** ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow will now automatically trigger to create the release." >> $GITHUB_STEP_SUMMARY